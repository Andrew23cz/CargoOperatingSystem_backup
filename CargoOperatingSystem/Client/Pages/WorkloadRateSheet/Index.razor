@page "/workloadratesheets/"
@inject HttpClient _client
@inject NavigationManager _navManager
@inject IJSRuntime js
@attribute [Authorize]

<h3 class="card-title">Workload Rate Sheets</h3>
<hr />

<a href="/workloadratesheets/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Workload Rate Sheet   
</a>
<br/>
<br/>

@if(WorkloadRateSheets == null)
{
    <div class="alert alert-info">Loading Workload Rate Sheets ...</div>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Currency</th>
                @*<th>AWB Issuing</th>
                <th>HAWB Issuing</th>
                <th>Cargo Labels</th>
                <th>Accept Assist</th>
                <th>Doc Correction</th>
                <th>Import Cgo</th>
                <th>Print Corr Docs</th>
                <th>Spc Cargo Labels</th>
                <th>After Open Hrs Svc</th>
                <th>Manual Data Insertion</th>
                <th>Pick-Up Documents</th>
                <th>Sec-Check Prepare</th>
                <th>Sec-Check Assist</th>
                <th>Packing Assist</th>
                <th>Accept Assist DG</th>
                <th>Cosulting DG</th>*@
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var workloadRateSheet in WorkloadRateSheets)
            {
                <tr>
                    <td>@workloadRateSheet.Name</td>
                    <td>@workloadRateSheet.Currency.Code</td>
                    @*<td>@workloadRateSheet.AwbIssuing</td>
                    <td>@workloadRateSheet.HawbIssuing</td>
                    <td>@workloadRateSheet.CargoLabels</td>
                    <td>@workloadRateSheet.AcceptanceAssist</td>
                    <td>@workloadRateSheet.DocumentsCorrection</td>
                    <td>@workloadRateSheet.ImportCgoProcessing</td>
                    <td>@workloadRateSheet.PrintingCorrectedDocs</td>
                    <td>@workloadRateSheet.SpecCargoLabels</td>
                    <td>@workloadRateSheet.AfterOpeningHoursService</td>
                    <td>@workloadRateSheet.ManualDataInsertion</td>
                    <td>@workloadRateSheet.PickUpDocuments</td>
                    <td>@workloadRateSheet.SecurityCheckPrepare</td>
                    <td>@workloadRateSheet.SecurityCheckAssist</td>
                    <td>@workloadRateSheet.PackingAssist</td>
                    <td>@workloadRateSheet.AcceptanceAssistDG</td>
                    <td>@workloadRateSheet.CosultingDG</td>*@
                    
                    <td>
                        <a href="/workloadratesheets/view/@workloadRateSheet.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/workloadratesheets/edit/@workloadRateSheet.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick=@(()=>Delete(@workloadRateSheet.Id))>
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }

        </tbody>

    </table>
}


@code {
    private IList<WorkloadRateSheet> WorkloadRateSheets;

    protected async override Task OnInitializedAsync()
    {
        WorkloadRateSheets = await _client.GetFromJsonAsync<IList<WorkloadRateSheet>>(Endpoints.WorkloadRateSheetsEndpoint);
    }

    private async Task Delete(int workloadRateSheetId)
    {
        var workloadRateSheet = WorkloadRateSheets.First(q => q.Id == workloadRateSheetId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete ID: {workloadRateSheet.Id}?");

        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.WorkloadRateSheetsEndpoint}{workloadRateSheetId}");
            await OnInitializedAsync();
        }
    }

}
