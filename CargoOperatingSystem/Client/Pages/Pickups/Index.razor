@page "/pickups/"
@inject HttpClient _client
@inject NavigationManager _navManager
@inject IJSRuntime js
@attribute [Authorize]

<h3 class="card card-title">List Of Pickups</h3>
<hr />

<a href="/pickups/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Pickup
</a>

<br/>
<br/>

@if(Pickups == null)
{
    <div class="alert alert-info">Loading Pickups ...</div>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Pickup Address</th>
                <th>Delivery Address</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var pickup in Pickups)
            {
                <tr>
                    <td>@pickup.PickupDate</td>
                    <td>@pickup.PickupAddress</td>
                    <td>@pickup.DeliveryAddress</td>
                    <td>
                        <a href="/dimmensions/view/@pickup.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/dimmensions/edit/@pickup.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick=@(()=>Delete(@pickup.Id))>
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }

        </tbody>

    </table>
}




@code {

    private IList<Pickup> Pickups;

    protected async override Task OnInitializedAsync()
    {
        Pickups = await _client.GetFromJsonAsync<IList<Pickup>>(Endpoints.PickupsEndpoint);
    }

    private async Task Delete(int pickupId)
    {
        var pickup = Pickups.First(q => q.Id == pickupId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete this pickup ID {pickup.Id}?");

        if (confirm)
        {
            await _client.DeleteAsync($"{Endpoints.PickupsEndpoint}{pickupId}");
            await OnInitializedAsync();
        }
    }

    


}
