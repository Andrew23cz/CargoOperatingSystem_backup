@inject HttpClient _client

<EditForm Model="@pickup" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
     
    <div class="row">
        <div class="form-group mx-3">
            <label>Pickup Date</label>
            <div>
                <InputDate @bind-Value="@pickup.PickupDate" class="form-control"/>
                <ValidationMessage For="@(()=> pickup.PickupDate)" />
            </div>
        </div>
        <div class="form-group mx-3">
            <label>Pickup Address:</label>
            <div>
                <InputTextArea @bind-Value="@pickup.PickupAddress" class="form-control"/>
                <ValidationMessage For="@(()=> pickup.PickupAddress)" />
            </div>
        </div>
        
        

        <div class="form-group mx-3">
        <label>Delivery to GHA: </label>
            <div>
                <InputSelect @bind-Value="pickup.SupplierId" @oninput="@SwitchConfirm" class="form-control">
                    <option value="">-- Select GHA --</option>
                    @if (Suppliers != null)
                    {
                        foreach (var supplier in Suppliers)
                        {
                            <option value="@supplier.Id">@supplier.CompanyName</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => pickup.SupplierId)" />
            </div>
        </div>

        @if (!selectConfirm)
        {
            <div class="form-group mx-3">
                <label>Custom Delivery Address:</label>
                <div>
                    <InputTextArea @bind-Value="@pickup.DeliveryAddress" class="form-control"/>
                    <ValidationMessage For="@(()=> pickup.DeliveryAddress)" />
                </div>
            </div>
        }

        <div class="form-group mx-3">
            <label>Pickup Amount:</label>
            <div>
                <InputNumber @bind-Value="@pickup.PickupAmount" class="form-control"/>
                <ValidationMessage For="@(()=> pickup.PickupAmount)" />
            </div>
        </div>
    </div>

    
    <button type="submit" class="btn btn-success">
        Save
    </button>
           
</EditForm>

@code {

    [Parameter] public Pickup pickup { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Supplier> Suppliers;
    private bool selectConfirm = false;

    protected async override Task OnInitializedAsync()
    {
        Suppliers = await _client.GetFromJsonAsync<IList<Supplier>>(Endpoints.SuppliersEndpoint);
        
    }

    private async Task SwitchConfirm()
    {
        if (selectConfirm)
        {
            selectConfirm = false;
        }
        else
        {
            selectConfirm = true;
        }

        await OnInitializedAsync();
    }

}
